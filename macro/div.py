#!/usr/bin/env python    
#-*- coding:utf-8 -*-   
"""
This module provides the comparison of multi ASIC data with test pulse input.
"""
__author__    = "I-Huan CHIU"
__email__     = "ichiu@chem.sci.osaka-u.ac.jp"
__created__   = "2019-11-22"
__copyright__ = "Copyright 2019 I-Huan CHIU"
__license__   = "GPL http://www.gnu.org/licenses/gpl.html"

# modules
import sys,os,random,math,ROOT
from ROOT import TFile, TTree, TGaxis, gStyle
ROOT.gROOT.SetBatch(1)
import argparse
from multiprocessing import Pool, cpu_count
import time
from array import array
import logging
from random import gauss

def createRatioCanvas(Name = "cs", w = 1500, h = 800):
    cRatioCanvas = ROOT.TCanvas(Name,"",0,0,int(w),int(h))
    cRatioCanvas.GetFrame().SetBorderMode(0)
    cRatioCanvas.GetFrame().SetBorderSize(0)
    cRatioCanvas.SetBorderMode(0)
    cRatioCanvas.SetBorderSize(0)
    cRatioCanvas.SetFillStyle(0)
    cRatioCanvas.SetFillColor(0)
    cRatioCanvas.SetRightMargin(0.15)
    cRatioCanvas.SetWindowSize( int(w + (w-cRatioCanvas.GetWw())), int(h + (h-cRatioCanvas.GetWh())) )
    return cRatioCanvas

def plot(args, IsRandom = False):
    __location__ = os.path.realpath(
            os.path.join(os.getcwd(), os.path.dirname(__file__)))
    ROOT.gROOT.LoadMacro( __location__+'/AtlasStyle/AtlasStyle.C')
    ROOT.SetAtlasStyle()
	 
    cv = createRatioCanvas()
    cv.Divide(4,2)
    for i in range(3):
       # 1908-1
       fchip1 = ROOT.TFile("../data/20191121/testpulse_20191121_00004_001.root")   
       fchip2 = ROOT.TFile("../data/20191121/testpulse_20191121_00005_001.root")   
       fchip3 = ROOT.TFile("../data/20191121/testpulse_20191121_00006_001.root")   
       fchip4 = ROOT.TFile("../data/20191121/testpulse_20191121_00007_001.root")   
       fchip5 = ROOT.TFile("../data/20191121/testpulse_20191121_00008_001.root")   
       fchip6 = ROOT.TFile("../data/20191121/testpulse_20191121_00009_001.root")   
       fchip7 = ROOT.TFile("../data/20191121/testpulse_20191121_00010_001.root")   
       fchip8 = ROOT.TFile("../data/20191121/testpulse_20191121_00011_001.root")   
       if i == 1:
          # 1908-3
          fchip1 = ROOT.TFile("../data/20191121/20191121_osaka_00003_001.root")   
          fchip2 = ROOT.TFile("../data/20191121/20191121_osaka_00004_001.root")   
          fchip3 = ROOT.TFile("../data/20191121/20191121_osaka_00005_001.root")   
          fchip4 = ROOT.TFile("../data/20191121/20191121_osaka_00006_001.root")   
          fchip5 = ROOT.TFile("../data/20191121/20191121_osaka_00007_001.root")   
          fchip6 = ROOT.TFile("../data/20191121/20191121_osaka_00008_001.root")   
          fchip7 = ROOT.TFile("../data/20191121/20191121_osaka_00009_001.root")   
          fchip8 = ROOT.TFile("../data/20191121/20191121_osaka_00010_001.root")   
       if i == 2:
          # 1908-2
          fchip1 = ROOT.TFile("../data/20191121/20191122_asic2_00003_001.root")   
          fchip2 = ROOT.TFile("../data/20191121/20191122_asic2_00004_001.root")   
          fchip3 = ROOT.TFile("../data/20191121/20191122_asic2_00005_001.root")   
          fchip4 = ROOT.TFile("../data/20191121/20191122_asic2_re_00005_001.root")   
          fchip5 = ROOT.TFile("../data/20191121/20191122_asic2_re_00001_001.root")   
          fchip6 = ROOT.TFile("../data/20191121/20191122_asic2_re_00002_001.root")   
          fchip7 = ROOT.TFile("../data/20191121/20191122_asic2_re_00003_001.root")   
          fchip8 = ROOT.TFile("../data/20191121/20191122_asic2_re_00004_001.root")   
   
       hchip1 = fchip1.Get("histall")
       hchip2 = fchip2.Get("histall")
       hchip3 = fchip3.Get("histall")
       hchip4 = fchip4.Get("histall")
       hchip5 = fchip5.Get("histall")
       hchip6 = fchip6.Get("histall")
       hchip7 = fchip7.Get("histall")
       hchip8 = fchip8.Get("histall")
   
       fout = ROOT.TFile( args.output, 'recreate' )
   
       #make plots
       ti = time.time()
       gStyle.SetPalette(55)
   
       cv.cd(1).SetRightMargin(0.18)
       hchip1.GetXaxis().SetRange(1,64*1)
       hchip1.GetYaxis().SetRange(0,1000)
       hchip1.SetStats(0)
       hchip1.SetTitle("Pt ASIC-1")
       hchip1.GetXaxis().SetTitle("Channels")
       hchip1.GetYaxis().SetTitle("ADC")
       hchip1.GetZaxis().SetTitle("Counts")
       hchip1.GetXaxis().SetTickLength(0)
       hchip1.GetXaxis().SetLabelOffset(999)
       hchip1.Draw("colz")
       PaveText1 = ROOT.TPaveText(0,900,64*1-1,1000)
       PaveText1.SetTextFont(42)
       PaveText1.SetTextSize(0.05)
       PaveText1.SetFillColor(ROOT.kWhite)
       PaveText1.SetFillStyle(1001)
       PaveText1.SetShadowColor(0)
       PaveText1.SetBorderSize(1)
       PaveText1.AddText("Pt ASIC-1")
       PaveText1.Draw("SAME")
       taxis1 = ROOT.TGaxis(1,0,64*1,0, 1,64,510,"",0)
       taxis1.Draw("same")
   
       cv.cd(2).SetRightMargin(0.18)
       cv.SetRightMargin(0.18)
       hchip2.GetXaxis().SetRange(1+64*1,64*2)
       hchip2.GetYaxis().SetRange(0,1000)
       hchip2.SetStats(0)
       hchip2.SetTitle("Pt ASIC-2")
       hchip2.GetXaxis().SetTitle("Channels")
       hchip2.GetYaxis().SetTitle("ADC")
       hchip2.GetZaxis().SetTitle("Counts")
       hchip2.GetXaxis().SetTickLength(0)
       hchip2.GetXaxis().SetLabelOffset(999)
       hchip2.Draw("colz")
       PText2 = ROOT.TPaveText(64*1,900,64*2-1,1000)
       PText2.SetTextFont(42)
       PText2.SetTextSize(0.05)
       PText2.SetFillColor(ROOT.kWhite)
       PText2.SetFillStyle(1001)
       PText2.SetShadowColor(0)
       PText2.SetBorderSize(1)
       PText2.AddText("Pt ASIC-2")
       PText2.Draw("SAME")
       taxis2 = ROOT.TGaxis(1+64*1,0,64*2,0, 1,64,510,"",0)
       taxis2.Draw("same")
   
       cv.cd(3).SetRightMargin(0.18)
       cv.SetRightMargin(0.18)
       hchip3.GetXaxis().SetRange(1+64*2,64*3)
       hchip3.GetYaxis().SetRange(0,1000)
       hchip3.SetStats(0)
       hchip3.SetTitle("Pt ASIC-3")
       hchip3.GetXaxis().SetTitle("Channels")
       hchip3.GetYaxis().SetTitle("ADC")
       hchip3.GetZaxis().SetTitle("Counts")
       hchip3.GetXaxis().SetTickLength(0)
       hchip3.GetXaxis().SetLabelOffset(999)
       hchip3.Draw("colz")
       PText3 = ROOT.TPaveText(64*2,900,64*3-1,1000)
       PText3.SetTextFont(42)
       PText3.SetTextSize(0.05)
       PText3.SetFillColor(ROOT.kWhite)
       PText3.SetFillStyle(1001)
       PText3.SetShadowColor(0)
       PText3.SetBorderSize(1)
       PText3.AddText("Pt ASIC-3")
       PText3.Draw("SAME")
       taxis3 = ROOT.TGaxis(1+64*2,0,64*3,0, 1,64,510,"",0)
       taxis3.Draw("same")
   
       cv.cd(4).SetRightMargin(0.18)
       hchip4.GetXaxis().SetRange(1+64*3,64*4)
       hchip4.GetYaxis().SetRange(0,1000)
       hchip4.SetStats(0)
       hchip4.SetTitle("Pt ASIC-4")
       hchip4.GetXaxis().SetTitle("Channels")
       hchip4.GetYaxis().SetTitle("ADC")
       hchip4.GetZaxis().SetTitle("Counts")
       hchip4.GetXaxis().SetTickLength(0)
       hchip4.GetXaxis().SetLabelOffset(999)
       hchip4.Draw("colz")
       PText4 = ROOT.TPaveText(64*3,900,64*4-1,1000)
       PText4.SetTextFont(42)
       PText4.SetTextSize(0.05)
       PText4.SetFillColor(ROOT.kWhite)
       PText4.SetFillStyle(1001)
       PText4.SetShadowColor(0)
       PText4.SetBorderSize(1)
       PText4.AddText("Pt ASIC-4")
       PText4.Draw("SAME")
       taxis4 = ROOT.TGaxis(1+64*3,0,64*4,0, 1,64,510,"",0)
       taxis4.Draw("same")
   
       cv.cd(5).SetRightMargin(0.18)
       hchip5.GetXaxis().SetRange(1+64*4,64*5)
       hchip5.GetYaxis().SetRange(0,1000)
       hchip5.SetStats(0)
       hchip5.SetTitle("Al ASIC-1")
       hchip5.GetXaxis().SetTitle("Channels")
       hchip5.GetYaxis().SetTitle("ADC")
       hchip5.GetZaxis().SetTitle("Counts")
       hchip5.GetXaxis().SetTickLength(0)
       hchip5.GetXaxis().SetLabelOffset(999)
       hchip5.Draw("colz")
       PText5 = ROOT.TPaveText(64*4,900,64*5-1,1000)
       PText5.SetTextFont(42)
       PText5.SetTextSize(0.05)
       PText5.SetFillColor(ROOT.kWhite)
       PText5.SetFillStyle(1001)
       PText5.SetShadowColor(0)
       PText5.SetBorderSize(1)
       PText5.AddText("Al ASIC-5")
       PText5.Draw("SAME")
       taxis5 = ROOT.TGaxis(1+64*4,0,64*5,0, 1,64,510,"",0)
       taxis5.Draw("same")
   
       cv.cd(6).SetRightMargin(0.18)
       hchip6.GetXaxis().SetRange(1+64*5,64*6)
       hchip6.GetYaxis().SetRange(0,1000)
       hchip6.SetStats(0)
       hchip6.SetTitle("Al ASIC-6")
       hchip6.GetXaxis().SetTitle("Channels")
       hchip6.GetYaxis().SetTitle("ADC")
       hchip6.GetZaxis().SetTitle("Counts")
       hchip6.GetXaxis().SetTickLength(0)
       hchip6.GetXaxis().SetLabelOffset(999)
       hchip6.Draw("colz")
       PText6 = ROOT.TPaveText(64*5,900,64*6-1,1000)
       PText6.SetTextFont(42)
       PText6.SetTextSize(0.05)
       PText6.SetFillColor(ROOT.kWhite)
       PText6.SetFillStyle(1001)
       PText6.SetShadowColor(0)
       PText6.SetBorderSize(1)
       PText6.AddText("Al ASIC-6")
       PText6.Draw("SAME")
       taxis6 = ROOT.TGaxis(1+64*5,0,64*6,0, 1,64,510,"",0)
       taxis6.Draw("same")
   
       cv.cd(7).SetRightMargin(0.18)
       hchip7.GetXaxis().SetRange(1+64*6,64*7)
       hchip7.GetYaxis().SetRange(0,1000)
       hchip7.SetStats(0)
       hchip7.SetTitle("Al ASIC-7")
       hchip7.GetXaxis().SetTitle("Channels")
       hchip7.GetYaxis().SetTitle("ADC")
       hchip7.GetZaxis().SetTitle("Counts")
       hchip7.GetXaxis().SetTickLength(0)
       hchip7.GetXaxis().SetLabelOffset(999)
       hchip7.Draw("colz")
       PText7 = ROOT.TPaveText(64*6,900,64*7-1,1000)
       PText7.SetTextFont(42)
       PText7.SetTextSize(0.05)
       PText7.SetFillColor(ROOT.kWhite)
       PText7.SetFillStyle(1001)
       PText7.SetShadowColor(0)
       PText7.SetBorderSize(1)
       PText7.AddText("Al ASIC-7")
       PText7.Draw("SAME")
       taxis7 = ROOT.TGaxis(1+64*6,0,64*7,0, 1,64,510,"",0)
       taxis7.Draw("same")
   
       cv.cd(8).SetRightMargin(0.18)
       hchip8.GetXaxis().SetRange(1+64*7,64*8)
       hchip8.GetYaxis().SetRange(0,1000)
       hchip8.SetStats(0)
       hchip8.SetTitle("Al ASIC-8")
       hchip8.GetXaxis().SetTitle("Channels")
       hchip8.GetYaxis().SetTitle("ADC")
       hchip8.GetZaxis().SetTitle("Counts")
       hchip8.GetXaxis().SetTickLength(0)
       hchip8.GetXaxis().SetLabelOffset(999)
       hchip8.Draw("colz")
       PText8 = ROOT.TPaveText(1+64*7-1,900,64*8-1,1000)
       PText8.SetTextFont(42)
       PText8.SetTextSize(0.05)
       PText8.SetFillColor(ROOT.kWhite)
       PText8.SetFillStyle(1001)
       PText8.SetShadowColor(0)
       PText8.SetBorderSize(1)
       PText8.AddText("Al ASIC-8")
       PText8.Draw("SAME")
       taxis8 = ROOT.TGaxis(1+64*7,0,64*8,0, 1,64,510,"",0)
       taxis8.Draw("same")
   
       tf = time.time()
       dt = tf - ti
       print("Hist processing time: %.1f s"%(dt))
       if i == 0:
          cv.SaveAs("../run/figs/testpulse_fec_1908-1.pdf")
       if i == 1:    
          cv.SaveAs("../run/figs/testpulse_fec_1908-2.pdf")
       if i == 2:
          cv.SaveAs("../run/figs/testpulse_fec_1908-3.pdf")
   #    cv.Draw()
       fout.cd()
       cv.Write()
    fout.Close()
      
if __name__ == "__main__":

    parser = argparse.ArgumentParser(description='Process some integers.')
    parser.add_argument("--input", type=str, default="./20151112_00009_001.root", help="Input File Name")
    parser.add_argument("--output", type=str, default="../run/root/testpulse_asic_osaka.root", help="Input File Name")
    parser.add_argument('--asic', default="a19083", type=str, help="one of [a19083, a19081, a19082]")
    args = parser.parse_args()

    plot( args , True)

